package com.kta.portal.admin.feature.api.partner;

import com.kta.portal.admin.dto.ResponseDto;
import com.kta.portal.admin.feature.repository.PartnerRepository;
import com.kta.portal.admin.feature.repository.model.Partner;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDateTime;
import java.util.UUID;

@RestController
@RequiredArgsConstructor
public class PostPartnerController {

    private final PostPartnerService postPartnerService;

    @PostMapping("/api/partners")
    public ResponseEntity<ResponseDto<PostPartnerHttpResponseDto>> createPartner(
            @Valid @RequestBody PostPartnerHttpRequestDto requestDto) {
        PostPartnerHttpResponseDto partner = postPartnerService.createPartner(requestDto);
        return ResponseEntity.status(HttpStatus.CREATED).body(ResponseDto.success(partner));
    }
}

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
class PostPartnerService {

    private final PartnerRepository partnerRepository;

    @Transactional
    public PostPartnerHttpResponseDto createPartner(PostPartnerHttpRequestDto requestDto) {
        Partner partner = new Partner();
        // Both id and partnerId will be auto-generated by PostgreSQL uuidv7()
        partner.setPartnerName(requestDto.getPartnerName());
        partner.setIsActive(requestDto.getIsActive() != null ? requestDto.getIsActive() : true);
        partner.setCreatedAt(LocalDateTime.now());

        Partner savedPartner = partnerRepository.save(partner);
        return convertToHttpResponseDto(savedPartner);
    }

    private PostPartnerHttpResponseDto convertToHttpResponseDto(Partner partner) {
        PostPartnerHttpResponseDto dto = new PostPartnerHttpResponseDto();
        dto.setId(partner.getId());
        dto.setPartnerName(partner.getPartnerName());
        dto.setIsActive(partner.getIsActive());
        dto.setCreatedAt(partner.getCreatedAt());
        return dto;
    }
}

@Data
class PostPartnerHttpRequestDto {
    @NotBlank(message = "Partner name is required")
    private String partnerName;

    private Boolean isActive;
}

@Data
class PostPartnerHttpResponseDto {
    private UUID id;
    private String partnerName;
    private Boolean isActive;
    private LocalDateTime createdAt;
}